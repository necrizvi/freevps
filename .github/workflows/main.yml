name: Windows - RustDesk Server

on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  rustdesk:
    name: Start RustDesk Host (bounded)
    runs-on: windows-latest
    timeout-minutes: 240   # hard stop at 4 hours max

    steps:
      - name: Checkout (optional)
        uses: actions/checkout@v4

      # ---- Optional: generate connection credentials (mask in logs) ----
      - name: Generate RustDesk credentials
        shell: pwsh
        run: |
          # Random-ish ID and 12-char password
          $id  = Get-Random -Minimum 100000 -Maximum 999999
          $chs = (65..90) + (97..122) + (48..57) + 33,35,36,64
          $pwd = -join (1..12 | ForEach-Object { [char] ($chs | Get-Random) })

          "RUSTDESK_ID=$id"        | Out-File -FilePath $env:GITHUB_ENV -Append
          "RUSTDESK_PASSWORD=$pwd" | Out-File -FilePath $env:GITHUB_ENV -Append

          # Mask the password in all subsequent logs
          echo "::add-mask::$pwd"

      # ---- Install RustDesk (WinGet; fallback to Chocolatey) ----
      - name: Install RustDesk (WinGet with fallback)
        shell: pwsh
        run: |
          $env:WINGET_CONFIG_DISABLE_INTERACTIVITY = "1"
          try {
            winget --version
            winget install --id RustDesk.RustDesk -e --accept-source-agreements --accept-package-agreements --source winget
          } catch {
            Write-Host "WinGet install failed; falling back to Chocolatey..."
            Set-ExecutionPolicy Bypass -Scope Process -Force
            if (-not (Get-Command choco -ErrorAction SilentlyContinue)) {
              Invoke-Expression ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))
            }
            choco install rustdesk -y --no-progress
          }

      # ---- Find the actual rustdesk.exe path (don’t hard-code) ----
      - name: Locate RustDesk executable
        id: find_rustdesk
        shell: pwsh
        run: |
          $candidates = @(
            "C:\Program Files\RustDesk\*.exe",
            "C:\Program Files (x86)\RustDesk\*.exe",
            "$Env:LOCALAPPDATA\Programs\RustDesk\*.exe"
          )
          $exe = $null
          foreach ($p in $candidates) {
            $cand = Get-ChildItem $p -ErrorAction SilentlyContinue | Where-Object { $_.Name -match '^rustdesk.*\.exe$' } | Select-Object -First 1
            if ($cand) { $exe = $cand.FullName; break }
          }
          if (-not $exe) {
            $cand = Get-ChildItem -Recurse "$Env:LOCALAPPDATA\Programs" -Filter "rustdesk*.exe" -ErrorAction SilentlyContinue | Select-Object -First 1
            if ($cand) { $exe = $cand.FullName }
          }
          if (-not $exe) { throw "RustDesk executable not found after install." }
          "exe=$exe" | Out-File -FilePath $Env:GITHUB_OUTPUT -Append
          Write-Host "Found RustDesk at: $exe"

      # ---- Start RustDesk host (adjust args for your setup) ----
      - name: Start RustDesk directly
        shell: pwsh
        run: |
          $exe = '${{ steps.find_rustdesk.outputs.exe }}'
          if (-not (Test-Path $exe)) { throw "Missing RustDesk exe at $exe" }

          $work = Split-Path $exe
          # Example host start; add/remove flags as needed for your environment.
          $args = @("--host")
          if ($env:RUSTDESK_ID)       { $args += @("--id", $env:RUSTDESK_ID) }
          if ($env:RUSTDESK_PASSWORD) { $args += @("--password", $env:RUSTDESK_PASSWORD) }

          Start-Process -FilePath $exe -ArgumentList $args -WorkingDirectory $work -PassThru | Out-Null
          Write-Host "RustDesk started with args: $($args -join ' ')"

      # ---- Save connection info without leaking the password in logs ----
      - name: Save connection details (short-lived)
        if: env.RUSTDESK_ID != '' || env.RUSTDESK_PASSWORD != ''
        shell: pwsh
        run: |
          $path = "$env:RUNNER_TEMP\rustdesk-info.txt"
          @"
RustDesk executable: ${{ steps.find_rustdesk.outputs.exe }}
RustDesk ID: $env:RUSTDESK_ID
RustDesk Password: $env:RUSTDESK_PASSWORD
(Password is masked in logs; retrieve from this artifact.)
"@ | Out-File -FilePath $path -Encoding utf8
          echo $path

      - name: Upload connection details artifact
        if: env.RUSTDESK_ID != '' || env.RUSTDESK_PASSWORD != ''
        uses: actions/upload-artifact@v4
        with:
          name: rustdesk-info
          path: ${{ runner.temp }}\rustdesk-info.txt
          retention-days: 1

      # ---- Keep the runner alive for a bounded time (no infinite loop) ----
      - name: Keep alive for remote session (up to 3 hours)
        shell: pwsh
        run: |
          $minutes = 180
          for ($i=1; $i -le $minutes; $i++) {
            Start-Sleep -Seconds 60
            Write-Host "⏱️  Minute $i / $minutes - $(Get-Date)"
          }
